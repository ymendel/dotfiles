#!/usr/bin/env ruby

require 'open3'

def usage
  [
    "#{$0} [local_path] [remote_path]",
    "\tlocal_path defaults to current directory",
    "\tremote_path defaults to same name as current directory",
  ].join("\n")
end

if %w[--help -h -?].include?(ARGV[0])
  puts usage
  exit
end

def check_create_dir(remote_dir)
  stdout, stderr, status = Open3.capture3('rmapi', 'stat', remote_dir)
  unless status.success?
    parent = File.dirname(remote_dir)
    check_create_dir(parent) unless parent == '.'  # recursively check/create, dealing with absence of rmapi mkdir_p
    unless system('rmapi', 'mkdir', remote_dir)
      puts "directory '#{remote_dir}' doesn't exist remotely and could not create"
      exit 1
    end
  end
end

local_path = File.expand_path(ARGV[0] || '.')
remote_path = ARGV[1] || File.split(local_path).last

check_create_dir(remote_path)

stdout, stderr, status = Open3.capture3('rmapi', 'find', remote_path)
remote_entries = stdout.split("\n")
processed_remote_entries = remote_entries.collect do |entry|
  next unless entry.start_with?('[f]')

  entry.sub(/\A\[f\]\s+#{Regexp.escape(remote_path)}\//, '') + '.pdf'
end.compact

stdout, stderr, status = Open3.capture3('find', local_path, '-name', '*.pdf')
local_entries = stdout.split("\n")
processed_local_entries = local_entries.collect do |entry|
  entry.sub(/\A#{Regexp.escape(local_path)}\//, '')
end

missing_remote = processed_local_entries - processed_remote_entries
missing_remote.each do |entry|
  remote_dir = File.join(remote_path, File.dirname(entry))
  check_create_dir(remote_dir)
  system('rmapi', 'put', entry, remote_dir)
end

