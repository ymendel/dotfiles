#!/usr/bin/env bash
# ensuring bash for this, in case we're not on a bash shell (new MacOS defaults to zsh)
#
# bootstrap the entire dotfiles experience on this computer
# but safe to run periodically

set -e

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

echo ''

source "$DOTFILES_ROOT/script/helpers/printing.sh"
source "$DOTFILES_ROOT/script/helpers/linking.sh"

ensure_bash () {
    info 'checking shell'

    if [[ "$SHELL" =~ /bash$ ]]
    then
        success "shell is already a bash"
        return
    fi

    info "shell is '$SHELL'; switching to bash"

    # I don't want to figure out preference order here
    # so put multiple bashes in preference order in /etc/shells
    bashes=$(grep -e /bash$ /etc/shells)

    for bash in ${bashes[@]}
    do
        if [ -x $bash ]
        then
            info "trying '$bash'"
            if (chsh -s $bash)
            then
                success "changed shell to '$bash'"
                info "open a new terminal for best results"
                return
            else
                warn "problem trying to change shell to '$bash'"
            fi
        fi
    done

    fail "could not change shell"
}

install_dotfiles () {
    info 'installing dotfiles'

    local overwrite_all=false backup_all=false skip_all=false

    link_file $DOTFILES_ROOT "$HOME/.dotfiles"

    for src in $(find $DOTFILES_ROOT -name '*.symlink' -type f)
    do
        dst="$HOME/.$(basename ${src%.symlink})"
        link_file $src $dst
    done
}

ensure_local_dir () {
    info 'checking local dir'

    local localdir="$HOME/.local"

    if [[ -e $localdir ]]
    then
        info "$localdir exists"

        if [[ -d $localdir ]]
        then
            success "$localdir is already a directory"
        else
            fail "$localdir exists and is not a directory"
        fi
    else
        if ( mkdir $localdir )
        then
            success "made $localdir"
        else
            fail "could not make $localdir"
        fi
    fi
}

set_machine_profiles () {
    info 'determining machine profile(s)'

    local localdir="$HOME/.local"
    local typefile="$localdir/machine_profiles"
    local profiles=

    if [[ -e $typefile ]]
    then
        success "$typefile exists"
    else
        prompt "What profile(s) should apply to this machine? (e.g. work, personal)\n\
        If multiple profiles, separate them with a space."
        read profiles
        if (echo $profiles | tr ' ' "\n" | grep . | sort --uniq > $typefile)
        then
            success 'wrote profile(s)'
        else
            fail 'could not write profile(s)'
        fi
    fi
}

install_deps () {
    info "installing dependencies"

    # get output from updot, but end on the specific EOT character
    if ( bin/updot | while read -r data && [[ $(printf '%02X' \'${data:0:1}) != "04" ]] ; do info "$data"; done )
    then
        success "dependencies installed"
    else
        fail "error installing dependencies"
    fi
}

ensure_bash
install_dotfiles
ensure_local_dir
set_machine_profiles
install_deps

echo ''
echo '  All done!'
